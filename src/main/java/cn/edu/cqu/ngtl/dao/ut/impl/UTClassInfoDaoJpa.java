package cn.edu.cqu.ngtl.dao.ut.impl;import cn.edu.cqu.ngtl.dao.ut.UTClassInfoDao;import cn.edu.cqu.ngtl.dao.ut.UTClassInstructorDao;import cn.edu.cqu.ngtl.dao.ut.UTInstructorDao;import cn.edu.cqu.ngtl.dataobject.ut.UTSession;import cn.edu.cqu.ngtl.dataobject.view.UTClassInformation;import org.kuali.rice.krad.service.KRADServiceLocator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.springframework.stereotype.Repository;import javax.persistence.EntityManager;import javax.persistence.Query;import java.util.ArrayList;import java.util.List;import java.util.Map;/** * Created by awake on 2016-10-19. */@Repository@Component("UTClassInfoDaoJpa")public class UTClassInfoDaoJpa implements UTClassInfoDao {    EntityManager em =  KRADServiceLocator.getEntityManagerFactory().createEntityManager();    @Autowired    private UTClassInstructorDao utClassInstructorDao;    @Autowired    private UTInstructorDao utInstructorDao;    @Override    public List<UTClassInformation> getAllCurrentClassInformation(){        UTSession curSession = new UTSessionDaoJpa().getCurrentSession();        Query query = em.createNativeQuery("SELECT * FROM UNITIME_CLASS_INFORMATION t WHERE t.SESSION_ID='"+curSession.getId()+"'",UTClassInformation.class);        List<UTClassInformation> result = query.getResultList();        return result;    }    @Override    public UTClassInformation getOneById(Integer id) {        return KRADServiceLocator.getDataObjectService().find(UTClassInformation.class, id);    }    @Override    public List<UTClassInformation> selectBatchByIds(List<Object> classIds) {        UTSession curSession = new UTSessionDaoJpa().getCurrentSession();        List<UTClassInformation> informations = new ArrayList<>(classIds.size());        for(Object classId : classIds) {            Query query = em.createNativeQuery("SELECT * FROM UNITIME_CLASS_INFORMATION t WHERE t.SESSION_ID='" + curSession.getId() + "'" + " AND t.UNIQUEID='" + classId + "'",                    UTClassInformation.class);            informations.addAll(query.getResultList());        }        return informations;    }    @Override    public List<UTClassInformation> selectByConditions(Map<String, String> conditions) {        UTSession curSession = new UTSessionDaoJpa().getCurrentSession();        int countNull = 0;        for (Map.Entry<String, String> entry : conditions.entrySet()) {            if(entry.getValue() == null) {                conditions.put(entry.getKey(), "%");                countNull++;            }            else                conditions.put(entry.getKey(), "%" + entry.getValue() + "%");        }        if(countNull!=5) {            Query query = em.createNativeQuery("SELECT * FROM UNITIME_CLASS_INFORMATION A WHERE A .UNIQUEID IN ( SELECT U .CLASS_ID FROM UNITIME_CLASS_INSTRUCTOR U WHERE U .INSTRUCTOR_ID IN ( SELECT T.UNIQUEID FROM UNITIME_INSTRUCTOR T WHERE T . NAME LIKE '" + conditions.get("InstructorName") + "')) AND A .CLASS_NBR LIKE '" + conditions.get("ClassNumber") + "' AND A .DEPARTMENT_ID LIKE '" + conditions.get("DepartmentId") + "' AND A .COURSE_NAME LIKE '" + conditions.get("CourseName") + "' AND A .COURSE_CODE LIKE '" + conditions.get("CourseCode") + "' AND A.SESSION_ID ='" + curSession.getId() + "'", UTClassInformation.class);            return query.getResultList();        }        return this.getAllCurrentClassInformation();    }}